#############################################################################################
# This role generates crypto material for organisations.
#############################################################################################

# Check if CA-tools pod is running
- name: "Waiting for CA-tool in {{ item.name | lower }}-net"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: "Pod"
    namespace: "{{ item.name | lower }}-net"
    component_name: "ca-tools"
    check: "name"
    label_selectors:
      - name = {{ component_name }}
  tags:
    - notest

# Ensure ca directory is present in build
- name: Ensure ca directory exists
  file:
    path: "./build/crypto-config/peerOrganizations/{{ component_name }}/ca"
    state: directory

# Check if CA certs exists in vault, if not this should fail. If yes, get the certificate
- name: Check if ca certs already created
  shell: |
    vault kv get -field=ca.{{ component_name }}-cert.pem {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/ca > ca.{{ component_name }}-cert.pem
    mv ca.{{ component_name }}-cert.pem ./build/crypto-config/peerOrganizations/{{ component_name }}/ca/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  changed_when: false

# Check if CA key exists in vault, if not this should fail. If yes, get the certificate
- name: Check if ca key already created
  shell: |
    vault kv get -field={{ component_name }}-CA.key {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/ca > {{ component_name }}-CA.key
    mv {{ component_name }}-CA.key ./build/crypto-config/peerOrganizations/{{ component_name }}/ca/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  changed_when: false

- name: Call peercheck.yaml for each peer
  include_tasks: peercheck.yaml
  loop: "{{ services.peers }}"
  loop_control:
    loop_var: peer

- name: Call common.yaml for each peer
  include_tasks: common.yaml
  tags:
    - notest

- name: Call peer.yaml for each peer
  include_tasks: peer.yaml
  loop: "{{ services.peers }}"
  loop_control:
    loop_var: peer
  when: peer.peerstatus is not defined or peer.peerstatus == 'new'

############################################################################################
# Check if the MSP config.yaml exist or not
- name: Check if the MSP config.yaml exist or not
  stat:
    path: "./build/crypto-config/peerOrganizations/{{ component_name }}/msp/config.yaml"
  register: msp_file_status

# Create MSP directory if it does not exist
- name: Create the msp directory if it does not exist
  file:
    path: "./build/crypto-config/peerOrganizations/{{ component_name }}/msp"
    state: directory

# This task creates the MSP config.yaml file for organizations
- name: Create the MSP config.yaml file for orgs
  shell: |
    cd ./build/crypto-config/peerOrganizations/{{ component_name }}/msp
    cat <<EOF > config.yaml
    NodeOUs:
      Enable: true
      ClientOUIdentifier:
        Certificate: cacerts/ca-{{ component_name }}-7054.pem
        OrganizationalUnitIdentifier: client
      PeerOUIdentifier:
        Certificate: cacerts/ca-{{ component_name }}-7054.pem
        OrganizationalUnitIdentifier: peer
    EOF
  when: not msp_file_status.stat.exists
  changed_when: false

# Check orderer-certificate file exists
- name: Check that orderer-certificate file exists
  stat:
    path: "{{ orderer.certificate }}"
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  register: orderer_file_result
  failed_when: add_new_org == 'true' and not orderer_file_result.stat.exists # Fail the task if new_org is added and orderer-cert does not exist
  tags:
    - notest

# Ensure orderer-cert directory is present
- name: Ensure orderer tls cert directory exists
  file:
    path: "./build/crypto-config/ordererOrganizations/{{ orderer.org_name|lower }}-net/orderers/{{orderer.name}}.{{ orderer.org_name|lower }}-net/tls"
    state: directory
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  when: add_new_org == 'false'
  tags:
    - notest

# This task create the orderer certificate directories if it is not present 
- name: Create the orderer certificate directory if it does not exist
  file:
    path: "{{ orderer.certificate | dirname }}"
    state: directory
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  when: add_new_org == 'false' and add_peer is not defined

# This task generate the ca.crt file if it is not present
- name: Create the ca.crt for orderers if it is not present
  file:
    path: "{{ orderer.certificate }}"
    state: touch
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  when: add_new_org == 'false' and add_peer is not defined
  tags:
    - molecule-idempotence-notest

# Copy the ca.crt when add_new_org is false 
- name: Copy tls ca.crt from auto-generated path to given path
  copy:
    src: "./build/crypto-config/ordererOrganizations/{{ orderer.org_name|lower }}-net/orderers/{{orderer.name}}.{{ orderer.org_name|lower }}-net/tls/ca.crt"
    dest: "{{ orderer.certificate }}"
    follow: no
    force: yes
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  when: add_new_org == 'false' and add_peer is not defined
  tags:
    - notest

# Check if Orderer certs exists in vault. If yes, get the certificate
- name: Check if Orderer certs exist in Vault
  shell: |
    vault kv get -field=ca.crt {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/orderer/tls
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  register: orderer_certs_result
  ignore_errors: yes
  changed_when: false
  tags:
    - notest

- name: Save Orderer certs if not in Vault
  local_action: copy content="{{ orderer_certs_result.results[0].stdout }}" dest="{{ orderer.certificate }}"
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  when: orderer_certs_result.results[0].failed == False
  tags:
    - notest

- name: Copy organization level certificates for orderers
  shell: |
    {% for orderer in orderers %}
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/orderer/tls ca.crt="$(cat {{ orderer.certificate }})" 
    {% endfor %}
  vars:
    orderers: "{{ network.orderers }}"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: orderer_certs_result.results[0].failed == True
  tags:
    - notest

# Check admin msp already created
- name: Check if admin msp already created
  shell: |
    vault kv get -field=admincerts {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/msp
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_admin_result
  ignore_errors: yes
  changed_when: false

- name: Copy organization level certificates for orgs
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/tls ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/tls/ca.crt)" client.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/tls/client.crt)" client.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/tls/client.key)"
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/msp admincerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/msp/admincerts/Admin@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/msp/cacerts/ca-{{ component_name }}-7054.pem)" keystore="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/Admin@{{ component_name }}/tls/ca.crt)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_admin_result.failed == True

# Check user msp already created
- name: Check if user msp already created
  shell: |
    vault kv get -field=admincerts {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/users/user1/msp
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_user_result
  ignore_errors: yes
  changed_when: False

- name: Copy user certificates for orgs
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/users/user1/tls ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/tls/ca.crt)" client.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/tls/client.crt)" client.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/tls/client.key)"
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/users/user1/msp admincerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/msp/admincerts/User1@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/msp/cacerts/ca-{{ component_name }}-7054.pem)" keystore="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/User1@{{ component_name }}/tls/ca.crt)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_user_result.failed == True
