---
# We have enabled additional ports on Ambassador for TCP. By default 8443 is exposed.
# The extra ports are pass as parameter --set ambassador.otherPorts={10010,10020} is taken from network.env.ambassadorPorts
- name: Format ambassador ports
  args:
    executable: /bin/bash
  shell: |
    json='{{ stewards | to_json }}'
    length=$(echo "${json}" | jq '.[] | length')
    index=0
    declare -A ports
    while [[ ${index} < ${length} ]]
    do
      steward=$( echo ${json} | jq ".[${index}]")
      name=$(echo ${steward} | jq '.name' | tr -d '"')
      node_port=$(echo ${steward} | jq '.node.ambassador' | tr -d '"')
      client_port=$(echo ${steward} | jq '.client.ambassador' | tr -d '"')
      if [[ ${name} != null ]]
      then
        if [[ ${ports["{{ kubecontext }}"]} != "" ]]
        then
          ports+=( ["{{ kubecontext }}"]+=, )
        fi
        ports+=( ["{{ kubecontext }}"]+=${node_port},${client_port} )
      fi
      index=$(( ${index} + 1 ))
    done
    echo ${ports["{{ kubecontext }}"]}
  register: terminal
  when: network['type'] == 'indy' and item.services.stewards is defined
  tags:
    - molecule-idempotence-notest

- name: Get Elastic IP
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws.access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws.secret_key }}"
  shell: |
    # format ip addresses list to string with space separator
    ips=$(echo '{{ item.publicIps }}' | tr -d '[]' | sed 's/,/\ /g')
    data=$(aws ec2 describe-addresses --public-ips ${ips} --region {{ aws.region }} --output json | jq '.Addresses[].AllocationId')
    # format eip addresses list to string with comma separator (comma has to be escaped)
    echo ${data} | tr -d '"' | sed 's/\ /\\,/g'
  register: allocation_ips
  when: 
    - (network.type == 'indy' and item.services.stewards is defined ) or network['type'] == 'besu'
    - item.cloud_provider == 'aws' or item.cloud_provider == 'aws-baremetal' #As this shell code is specific to AWS, cloud provider check has been added
  tags:
    - notest
- name: Install Ambassador with EIP for Indy
  shell: |
    KUBECONFIG={{ kubeconfig_path }} helm upgrade --install --namespace default --set ambassador.otherPorts={"{{ terminal.stdout }},{{ network.env.ambassadorPorts }}"} --set ambassador.eip='{{ allocation_ips.stdout }}' --set ambassador.targetPort={{ ambassador.targetPort }} --set ambassador.port={{ ambassador.port }} --set ambassador.tag={{ ambassador.tag }} --set ambassador.image={{ ambassador.image }} ambassador {{ playbook_dir }}/../../../platforms/shared/charts/ambassador --set ambassador.loadBalancerSourceRanges={{ network.env.loadBalancerSourceRanges | default("") }}
  tags:
    - ambassador
    - molecule-idempotence-notest
  when: 
    - network.type == 'indy'
    - allocation_ips.stdout is defined

- name: Install Ambassador with EIP for Besu
  shell: |
    KUBECONFIG={{ kubeconfig_path }} helm upgrade --install --namespace default --set ambassador.otherPorts={"{{ network.env.ambassadorPorts }}"} --set ambassador.eip='{{ allocation_ips.stdout }}' --set ambassador.targetPort={{ ambassador.targetPort }} --set ambassador.port={{ ambassador.port }} --set ambassador.tag={{ ambassador.tag }} --set ambassador.image={{ ambassador.image }} ambassador {{ playbook_dir }}/../../../platforms/shared/charts/ambassador --set ambassador.loadBalancerSourceRanges={{ network.env.loadBalancerSourceRanges | default("") }} 
  tags:
    - ambassador
    - molecule-idempotence-notest
  when: 
    - network.type == 'besu'
    - allocation_ips.stdout is defined

- name: Install Ambassador for Corda/Quorum
  shell: |
    KUBECONFIG={{ kubeconfig_path }} helm upgrade --install --namespace default --set ambassador.otherPorts={"{{ network.env.ambassadorPorts }}"} --set ambassador.targetPort={{ ambassador.targetPort }} --set ambassador.port={{ ambassador.port }} --set ambassador.tag={{ ambassador.tag }} --set ambassador.image={{ ambassador.image }} ambassador {{ playbook_dir }}/../../../platforms/shared/charts/ambassador --set ambassador.loadBalancerSourceRanges={{ network.env.loadBalancerSourceRanges | default("") }}
  tags:
    - ambassador
    - molecule-idempotence-notest
  when: network.type == 'corda' or network.type == 'quorum' or network.type == 'corda-enterprise'

- name: Install Ambassador for Fabric
  shell: |
    KUBECONFIG={{ kubeconfig_path }} helm upgrade --install --namespace default --set ambassador.otherPorts={"{{ network.env.ambassadorPorts }}"} --set ambassador.grpc=enabled --set ambassador.targetPort={{ ambassador.targetPort }} --set ambassador.port={{ ambassador.port }} --set ambassador.tag={{ ambassador.tag }} --set ambassador.image={{ ambassador.image }} ambassador {{ playbook_dir }}/../../../platforms/shared/charts/ambassador --set ambassador.loadBalancerSourceRanges={{ network.env.loadBalancerSourceRanges | default("") }}
  tags:
    - ambassador
    - molecule-idempotence-notest
  when: network.type == 'fabric'

- name: Enable external DNS
  shell: |
    KUBECONFIG={{ kubeconfig_path }} kubectl annotate service ambassador --overwrite "external-dns.alpha.kubernetes.io/hostname=*.{{ item.external_url_suffix }}."
  tags:
    - ambassador
    - molecule-idempotence-notest
  when: 
    - (network.type == 'indy' and allocation_ips.stdout is defined) or network.type != 'indy'
    - network.env.external_dns is defined
    - network.env.external_dns == 'enabled'

# Disable TLS1.0 for the AWS Loadbalancer
- name: Disable TLS1.0 for the AWS
  shell: |
    KUBECONFIG={{ kubeconfig_path }} kubectl annotate service ambassador --overwrite "service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy=ELBSecurityPolicy-TLS-1-2-2017-01"
  tags:
    - ambassador
    - molecule-idempotence-notest
  when: 
    - (network.type == 'indy' and allocation_ips.stdout is defined) or network.type != 'indy'
    - item.cloud_provider == 'aws' or item.cloud_provider == 'aws-baremetal'

# Wait for Ambassador pods to start running
- name: wait for pods to come up
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    namespace: default
    kubeconfig: "{{ kubeconfig_path }}"
    context: "{{ kubecontext }}"
    component_name: ambassador
    component_type: "Pod"
    label_selectors: 
      - service = ambassador
  when: (network.type == 'indy' and allocation_ips.stdout is defined) or network.type != 'indy'
