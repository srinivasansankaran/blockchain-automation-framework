apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app: {{ .Values.nodeName }}
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
    backoffLimit: 6
    template:
      metadata:
        labels:
          app: {{ .Values.nodeName }}
          app.kubernetes.io/name: {{ .Values.nodeName }}
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        restartPolicy: "OnFailure"
        serviceAccountName: {{ $.Values.vault.serviceAccountName }}
        hostname: {{ .Values.nodeName }}
        securityContext:
          fsGroup: 1000
        initContainers:
        - name: init-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authPath }}
            - name: VAULT_APP_ROLE
              value: {{ $.Values.vault.role }}
            - name: BASE_DIR
              value: {{ $.Values.nodeConf.volume.baseDir }}
            - name: CERTS_SECRET_PREFIX
              value: {{ .Values.vault.certSecretPrefix }}
            - name: MOUNT_PATH
              value: "/DATA"       
          command: ["sh", "-c"]
          args:
          - |-
                #!/usr/bin/env sh
                validateVaultResponse () {
                  if echo ${2} | grep "errors"; then
                      echo "ERROR: unable to retrieve ${1}: ${2}"
                      exit 1
                  fi
                }
                # setting up env to get secrets from vault
                echo "Getting secrets from Vault Server"
                KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
                validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
                
                echo "logged into vault"
                # Creating dirs for storing the certificate
                mkdir -p ${MOUNT_PATH}/trust-stores
                # Fetching network-root-truststore certificates from vault
                COUNTER=1
                while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
                do
                    # get keystores from vault to see if certificates are created and put in vault
                    LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
                    if echo ${LOOKUP_SECRET_RESPONSE} | grep "errors"
                    then
                      sleep {{ $.Values.vault.retryInterval }}
                    else
                      network_root_truststore=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["network-root-truststore.jks"]')
                      echo "${network_root_truststore}" | base64 -d > ${MOUNT_PATH}/trust-stores/network-root-truststore.jks
                      echo "Successfully got network truststore certifcates"
                      break
                    fi 
                    COUNTER=`expr "$COUNTER" + 1`
                done
                if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
                then
                  # printing number of trial done before giving up
                  echo "$COUNTER"
                  echo "Network truststore certificates might not have been put in vault ! Giving up..."
                  exit 1
                fi
                
                mkdir -p ${MOUNT_PATH}/tlscerts
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ .Values.networkServices.idmanName }}/tlscerts | jq -r 'if .errors then . else . end')
                validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/{{ .Values.networkServices.idmanName }}/tlscerts)" "${LOOKUP_SECRET_RESPONSE}"
                IDMAN_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tlscacerts"]')
                echo "${IDMAN_CERT}" | base64 -d > ${MOUNT_PATH}/tlscerts/idman.crt
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ .Values.networkServices.networkmapName }}/tlscerts | jq -r 'if .errors then . else . end')
                validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/{{ .Values.networkServices.networkmapName }}/tlscerts)" "${LOOKUP_SECRET_RESPONSE}"
                NETWORKMAP_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tlscacerts"]')
                echo "${NETWORKMAP_CERT}" | base64 -d > ${MOUNT_PATH}/tlscerts/networkmap.crt
                #Fetching truststore credentials from vault
                mkdir -p ${MOUNT_PATH}/truststore
                OUTPUT_PATH=${MOUNT_PATH}/truststore;
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/truststore | jq -r 'if .errors then . else . end')
                validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/credentials/truststore)" "${LOOKUP_SECRET_RESPONSE}"
                ROOTCA_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["rootca"]')
                echo "${ROOTCA_TRUSTSTORE}"> ${OUTPUT_PATH}/rootcats
                TRUSTSTORE_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["trustStorePassword"]')
                echo "${TRUSTSTORE_PASSWORD}"> ${OUTPUT_PATH}/ts
                #Fetching keystore credentials from vault
                mkdir -p ${MOUNT_PATH}/keystore
                OUTPUT_PATH=${MOUNT_PATH}/keystore;
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/keystore | jq -r 'if .errors then . else . end')
                validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/credentials/keystore)" "${LOOKUP_SECRET_RESPONSE}"
                KEYSTORE_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keyStorePassword"]')
                echo "${KEYSTORE_PASSWORD}"> ${OUTPUT_PATH}/ks
                
                echo "Done with getting certifcates and credentials from vault"
          volumeMounts:
          - name: certificates
            mountPath: /DATA
        - name: db-healthcheck
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            COUNTER=1
            FLAG=true
            # perform health check if db is up and running before starting corda node
            while [ "$COUNTER" -le {{ $.Values.healthcheck.readinessthreshold }} ]
            do
              DB_NODE={{ .Values.dataSourceProperties.dbUrl }}:{{ .Values.dataSourceProperties.dbPort }}
              STATUS=$(nc -vz $DB_NODE 2>&1 | grep -c open )
              if [ "$STATUS" == 0 ]
              then
                  FLAG=false
              else
                  FLAG=true
                  echo "DB up and running"
              fi
              if [ "$FLAG" == false ]
              then
                  echo "Retry attempted $COUNTER times, retrying after {{ $.Values.healthcheck.readinesscheckinterval }} seconds"
                  COUNTER=`expr "$COUNTER" + 1`
                  sleep {{ $.Values.healthcheck.readinesscheckinterval }}
              else
                  echo "SUCCESS!"
                  echo "DB up and running!"
                  exit 0
                  break
              fi
            done
            if [ "$COUNTER" -gt {{ $.Values.healthcheck.readinessthreshold }} ] || [ "$FLAG" == false ]
            then
                echo "Retry attempted $COUNTER times, no DB up and running. Giving up!"
                exit 1
                break
            fi
        containers:
        - name: registration
          image: "{{ .Values.image.nodeContainerName }}"
          env:
            - name: ACCEPT_LICENSE
              value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
            - name: BASE_DIR
              value: {{ $.Values.nodeConf.volume.baseDir }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            echo 'networkServices {
                doormanURL="{{ .Values.networkServices.doormanURL }}"
                networkMapURL="{{ .Values.networkServices.networkMapURL }}"
            }
            dataSourceProperties {
                dataSource {
                    password = "{{ .Values.dataSourceProperties.dataSource.password }}"
                    url = "{{ .Values.dataSourceProperties.dataSource.url }}"
                    user = "{{ .Values.dataSourceProperties.dataSource.user }}"
                }
                dataSourceClassName = "{{ .Values.dataSourceProperties.dataSourceClassName }}"
            }
            notary {
                validating = "{{ .Values.nodeConf.notary.validating }}"
            }
            devMode = {{ .Values.nodeConf.devMode }}
            emailAddress : "{{ .Values.nodeConf.email }}"
            myLegalName : "{{ .Values.nodeConf.legalName }}"
            p2pAddress : "{{ .Values.nodeConf.p2p.url }}:{{ .Values.service.p2pPort }}"
            trustStorePassword: "TRUSTSTORE_PASSWORD"
            keyStorePassword: "KEYSTORE_PASSWORD"
            additionalP2PAddresses : ["{{ .Values.nodeConf.ambassador.p2pAddress }}"]
            detectPublicIp : false
            rpcSettings {
                address="{{ .Values.service.rpc.address }}:{{ .Values.service.rpc.addressPort }}"
                adminAddress="{{ .Values.service.rpc.admin.address }}:{{ .Values.service.rpc.admin.addressPort }}"
                standAloneBroker="{{ .Values.service.rpc.standAloneBroker }}"
                useSsl="{{ .Values.service.rpc.useSSL }}"
            }
            rpcUsers=[
                {
                    username="{{ .Values.service.rpc.users.username }}"
                    password="{{ .Values.service.rpc.users.password }}"
                    permissions=[
                        ALL
                    ]
                }
            ]' >> etc/notary.conf
            export TRUSTSTORE_PASSWORD=$(cat {{ $.Values.nodeConf.volume.baseDir }}/DATA/truststore/ts)
            sed -i -e "s*TRUSTSTORE_PASSWORD*${TRUSTSTORE_PASSWORD}*g" etc/notary.conf
            export KEYSTORE_PASSWORD=$(cat {{ $.Values.nodeConf.volume.baseDir }}/DATA/keystore/ks)
            sed -i -e "s*KEYSTORE_PASSWORD*${KEYSTORE_PASSWORD}*g" etc/notary.conf
            rm -r ${BASE_DIR}/certificates/done.txt
            yes | keytool -importcert -file DATA/tlscerts/networkmap.crt -storepass changeit -alias {{ .Values.networkServices.networkMapDomain }} -keystore /usr/lib/jvm/zulu8.33.0.1-jdk8.0.192-linux_musl_x64/jre/lib/security/cacerts
            yes | keytool -importcert -file DATA/tlscerts/idman.crt -storepass changeit -alias {{ .Values.networkServices.idmanDomain }} -keystore /usr/lib/jvm/zulu8.33.0.1-jdk8.0.192-linux_musl_x64/jre/lib/security/cacerts
            
            
            
            /bin/sh
            NETWORK_ROOT_TRUSTSTORE={{ $.Values.nodeConf.volume.baseDir }}/DATA/trust-stores/network-root-truststore.jks
            NETWORK_ROOT_TRUSTSTORE_PASSWORD=$(cat {{ $.Values.nodeConf.volume.baseDir }}/DATA/truststore/rootcats)
            
            while true
            do
                if [ ! -f certificates/nodekeystore.jks ] || [ ! -f certificates/sslkeystore.jks ] || [ ! -f certificates/truststore.jks ]
                then
                    echo
                    echo "Notary: running initial registration ..."
                    echo
                    pwd
                    java -Dcapsule.jvm.args='-Xmx{{ .Values.nodeConf.cordaJar.memorySize }}{{ .Values.nodeConf.cordaJar.unit }}' -jar {{ .Values.nodeConf.jarPath }}/corda.jar \
                      initial-registration \
                    --config-file={{ .Values.nodeConf.configPath }}/notary.conf \
                    --log-to-console \
                    --network-root-truststore ${NETWORK_ROOT_TRUSTSTORE}  \
                    --network-root-truststore-password ${NETWORK_ROOT_TRUSTSTORE_PASSWORD}
                    
                    EXIT_CODE=${?}
                else
                    echo
                    echo "Notary: already registered to IdMan - skipping initial registration."
                    echo
                    EXIT_CODE="0"
                    break
                fi
            done
            if [ "${EXIT_CODE}" -ne "0" ]
            then
                HOW_LONG={{ .Values.sleepTimeAfterError }}
                echo
                echo "Notary initial registration failed - exit code: ${EXIT_CODE} (error)"
                echo
                echo "Going to sleep for requested ${HOW_LONG} seconds to let you login and investigate."
                echo
                pwd
                ls -al 
            else
                HOW_LONG={{ .Values.sleepTime }}
                echo
                echo "Notary initial registration: no errors - sleeping for requested ${HOW_LONG} seconds before disappearing."
                echo
            fi
            sleep ${HOW_LONG}
            echo
            
            # Get the nodeInfo file name and store it in a variable
            nodeInfoFile=$(basename $(ls additional-node-infos/nodeInfo*))
            export nodeInfoFile
            envsubst <<"EOF" > additional-node-infos/network-parameters-initial.conf.tmp
            EOF
            mv additional-node-infos/network-parameters-initial.conf.tmp additional-node-infos/network-parameters-initial.conf
            echo "Created the network-parameters-initial.conf file"
            touch ${BASE_DIR}/certificates/done.txt
          volumeMounts:
          - name: notary-etc
            mountPath: {{ $.Values.nodeConf.volume.baseDir }}/etc
          - name: notary-nodeinfo
            mountPath: {{ $.Values.nodeConf.volume.baseDir }}/additional-node-infos
          - name: notary-certificates
            mountPath: {{ $.Values.nodeConf.volume.baseDir }}/certificates
          - name: certificates
            mountPath: {{ $.Values.nodeConf.volume.baseDir }}/DATA
          resources:
            requests:
              memory: {{ .Values.nodeConf.pod.resources.requests }}
            limits:
              memory: {{ .Values.nodeConf.pod.resources.limits }}
        - name: store-certs
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authPath }}
            - name: VAULT_APP_ROLE
              value: {{ $.Values.vault.role }}
            - name: BASE_DIR
              value: {{ $.Values.nodeConf.volume.baseDir }}
            - name: CERTS_SECRET_PREFIX
              value: {{ .Values.vault.certSecretPrefix }}
            - name: MOUNT_PATH
              value: "/DATA"
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            validateVaultResponse () {
              if echo ${2} | grep "errors"; then
                 echo "ERROR: unable to retrieve ${1}: ${2}"
                 exit 1
              fi
            }           
            # perform check if certificates are ready or not, and upload certificate into vault when ready
            COUNTER=1
            cd ${BASE_DIR}/certificates
            while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
            do
                if [ -e done.txt ]
                then
                  echo "certificates found, saving to vault"
                  # setting up env to get secrets from vault
                  KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                  VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
                  validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
                  (echo '{"nodekeystore.jks": "'; base64 ${BASE_DIR}/certificates/nodekeystore.jks; echo '"}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/certs/nodekeystore
                  (echo '{"sslkeystore.jks": "'; base64 ${BASE_DIR}/certificates/sslkeystore.jks; echo '"}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/certs/sslkeystore
                  (echo '{"truststore.jks": "'; base64 ${BASE_DIR}/certificates/truststore.jks; echo '"}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/certs/truststore
                  break
                else
                  echo "certificates are not ready, sleeping for {{ $.Values.vault.retryInterval }} seconds"
                  sleep {{ $.Values.vault.retryInterval }}
                  COUNTER=`expr "$COUNTER" + 1`
                fi
            done
            # perform check if network-parameters are ready or not, and upload it into vault when ready
            COUNTER=1
            cd ${BASE_DIR}/additional-node-infos
            while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
            do
                if [ -e network-parameters-initial.conf ]
                then
                  # setting up env to get secrets from vault
                  KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                  VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
                  validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
                  # getting the nodeInfo name
                  nodeInfoName=$(basename $(ls nodeInfo*))
                  # Encoding binary file and putting it in file, to make sure binary gets correctly put in Vault
                  base64 ${BASE_DIR}/additional-node-infos/nodeInfo* > ${BASE_DIR}/file
                  (echo '{"nodeInfoFile": "'; cat ${BASE_DIR}/file; echo '","nodeInfoName": "'; echo $nodeInfoName; echo '"}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/nodeInfo
                  (echo '{"network-parameters-initial": "'; base64 ${BASE_DIR}/additional-node-infos/network-parameters-initial.conf; echo '"}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/networkparam
                  break
                else
                  echo "node info not ready, sleeping sleeping for {{ $.Values.vault.retryInterval }} seconds"
                  sleep {{ $.Values.vault.retryInterval }}
                  COUNTER=`expr "$COUNTER" + 1`
                fi
            done
            if [ "$COUNTER" -gt {{ $.Values.vault.retries }} ]
            then
                echo "Retry attempted $COUNTER times, no files found. Giving up!"
                exit 1
                break
            fi
          volumeMounts:
          - name: notary-nodeinfo
            mountPath: {{ $.Values.nodeConf.volume.baseDir }}/additional-node-infos
          - name: notary-certificates
            mountPath: {{ $.Values.nodeConf.volume.baseDir }}/certificates
          - name: certificates
            mountPath: {{ $.Values.nodeConf.volume.baseDir }}/DATA
        imagePullSecrets:
        - name: {{ .Values.image.imagePullSecret }}
        volumes:
        - name: notary-etc
          emptyDir:
            medium: Memory
        - name: notary-nodeinfo
          emptyDir:
            medium: Memory
        - name: notary-certificates
          emptyDir:
            medium: Memory
        - name: certificates
          emptyDir:
            medium: Memory